{"ast":null,"code":"var _jsxFileName = \"/Users/zestgeek3/work/invocenew/src/Components/Modal/PaymentList.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport Box from \"@mui/material/Box\";\nimport Modal from \"@mui/material/Modal\";\nimport TableRow from \"@mui/material/TableRow\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport { payment_list } from \"../../Services/Invoice_Services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PaymentList = _ref => {\n  _s();\n  let {\n    isDepositedModalOpen,\n    onClose,\n    invoiceId\n  } = _ref;\n  const [paymentList, setPaymentList] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [isEditMode, setIsEditMode] = React.useState(false);\n  const [editedData, setEditedData] = React.useState({});\n  const paymentListColumns = [{\n    id: \"id\",\n    label: \"InvoiceId\",\n    minWidth: 100\n  }, {\n    id: \"created_at\",\n    label: \"Payment Date\",\n    minWidth: 100\n  }, {\n    id: \"amount\",\n    label: \"Amount\",\n    minWidth: 100\n  }, {\n    id: \"payment_method\",\n    label: \"Payment Method\",\n    minWidth: 100\n  }];\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 700,\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    p: 4\n  };\n  React.useEffect(() => {\n    const fetchPaymentList = async () => {\n      try {\n        var _paymentData$data;\n        setLoading(true);\n        const paymentData = await payment_list(invoiceId);\n        setPaymentList((paymentData === null || paymentData === void 0 ? void 0 : (_paymentData$data = paymentData.data) === null || _paymentData$data === void 0 ? void 0 : _paymentData$data.paid_amount) || []);\n      } catch (error) {\n        console.error(\"Error fetching payment list data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPaymentList();\n  }, [invoiceId]);\n  const toggleEditMode = () => {\n    setIsEditMode(!isEditMode);\n  };\n  const handleEdit = (value, columnId, index) => {\n    setEditedData({\n      ...editedData,\n      [index]: {\n        ...editedData[index],\n        [columnId]: value\n      }\n    });\n  };\n  const applyEdits = () => {\n    // You may want to handle the edited data here, e.g., send it to the server\n    // For simplicity, we're just updating the state in this example\n    setPaymentList(prevPaymentList => prevPaymentList.map((item, index) => ({\n      ...item,\n      ...editedData[index]\n    })));\n    toggleEditMode();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: isDepositedModalOpen,\n    onClose: onClose,\n    \"aria-labelledby\": \"deposited-amounts-modal-title\",\n    \"aria-describedby\": \"deposited-amounts-modal-description\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: style,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"deposited-amounts-modal-title\",\n        children: \"Payment History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [paymentListColumns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: paymentList.map((paymentItem, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [paymentListColumns.map(column => {\n              var _editedData$index;\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"left\",\n                children: isEditMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: ((_editedData$index = editedData[index]) === null || _editedData$index === void 0 ? void 0 : _editedData$index[column.id]) || paymentItem[column.id],\n                  onChange: e => handleEdit(e.target.value, column.id, index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 25\n                }, this) : column.id === \"created_at\" ? /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: \"flex\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      marginRight: \"4px\"\n                    },\n                    children: \"Rs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 27\n                  }, this), new Date(paymentItem[column.id]).toLocaleString(), \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: paymentItem[column.id]\n                }, void 0, false)\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: isEditMode ? /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => applyEdits(),\n                children: \"Apply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => toggleEditMode(),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentList, \"5RX1YZZ+atPugMXnJOTQhnmS7cU=\");\n_c = PaymentList;\nexport default PaymentList;\nvar _c;\n$RefreshReg$(_c, \"PaymentList\");","map":{"version":3,"names":["React","Table","TableBody","TableCell","TableHead","Box","Modal","TableRow","CircularProgress","Button","payment_list","PaymentList","isDepositedModalOpen","onClose","invoiceId","paymentList","setPaymentList","useState","loading","setLoading","isEditMode","setIsEditMode","editedData","setEditedData","paymentListColumns","id","label","minWidth","style","position","top","left","transform","width","bgcolor","boxShadow","p","useEffect","fetchPaymentList","paymentData","data","paid_amount","error","console","toggleEditMode","handleEdit","value","columnId","index","applyEdits","prevPaymentList","map","item","display","flexDirection","alignItems","justifyContent","height","column","paymentItem","e","target","marginRight","Date","toLocaleString"],"sources":["/Users/zestgeek3/work/invocenew/src/Components/Modal/PaymentList.js"],"sourcesContent":["import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport Box from \"@mui/material/Box\";\nimport Modal from \"@mui/material/Modal\";\nimport TableRow from \"@mui/material/TableRow\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Button from \"@mui/material/Button\";\nimport { payment_list } from \"../../Services/Invoice_Services\";\n\nconst PaymentList = ({ isDepositedModalOpen, onClose, invoiceId }) => {\n  const [paymentList, setPaymentList] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [isEditMode, setIsEditMode] = React.useState(false);\n  const [editedData, setEditedData] = React.useState({});\n\n  const paymentListColumns = [\n    { id: \"id\", label: \"InvoiceId\", minWidth: 100 },\n    { id: \"created_at\", label: \"Payment Date\", minWidth: 100 },\n    { id: \"amount\", label: \"Amount\", minWidth: 100 },\n    { id: \"payment_method\", label: \"Payment Method\", minWidth: 100 },\n  ];\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 700,\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    p: 4,\n  };\n\n  React.useEffect(() => {\n    const fetchPaymentList = async () => {\n      try {\n        setLoading(true);\n        const paymentData = await payment_list(invoiceId);\n        setPaymentList(paymentData?.data?.paid_amount || []);\n      } catch (error) {\n        console.error(\"Error fetching payment list data\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPaymentList();\n  }, [invoiceId]);\n\n  const toggleEditMode = () => {\n    setIsEditMode(!isEditMode);\n  };\n\n  const handleEdit = (value, columnId, index) => {\n    setEditedData({\n      ...editedData,\n      [index]: {\n        ...editedData[index],\n        [columnId]: value,\n      },\n    });\n  };\n\n  const applyEdits = () => {\n    // You may want to handle the edited data here, e.g., send it to the server\n    // For simplicity, we're just updating the state in this example\n    setPaymentList((prevPaymentList) =>\n      prevPaymentList.map((item, index) => ({\n        ...item,\n        ...editedData[index],\n      }))\n    );\n    toggleEditMode();\n  };\n\n  return (\n    <Modal\n      open={isDepositedModalOpen}\n      onClose={onClose}\n      aria-labelledby=\"deposited-amounts-modal-title\"\n      aria-describedby=\"deposited-amounts-modal-description\"\n    >\n      <Box sx={style}>\n        <h2 id=\"deposited-amounts-modal-title\">Payment History</h2>\n        {loading ? (\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              height: \"100%\",\n            }}\n          >\n            <CircularProgress />\n          </Box>\n        ) : (\n          <Table>\n            <TableHead>\n              <TableRow>\n                {paymentListColumns.map((column) => (\n                  <TableCell key={column.id} align=\"left\">\n                    {column.label}\n                  </TableCell>\n                ))}\n                <TableCell align=\"left\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paymentList.map((paymentItem, index) => (\n                <TableRow key={index}>\n                  {paymentListColumns.map((column) => (\n                    <TableCell key={column.id} align=\"left\">\n                      {isEditMode ? (\n                        <input\n                          type=\"text\"\n                          value={editedData[index]?.[column.id] || paymentItem[column.id]}\n                          onChange={(e) => handleEdit(e.target.value, column.id, index)}\n                        />\n                      ) : column.id === \"created_at\" ? (\n                        <Box sx={{ display: \"flex\" }}>\n                          <span style={{ marginRight: \"4px\" }}>Rs</span>\n                          {new Date(paymentItem[column.id]).toLocaleString()}{\" \"}\n                        </Box>\n                      ) : (\n                        <>{paymentItem[column.id]}</>\n                      )}\n                    </TableCell>\n                  ))}\n                  <TableCell align=\"left\">\n                    {isEditMode ? (\n                      <Button onClick={() => applyEdits()}>Apply</Button>\n                    ) : (\n                      <Button onClick={() => toggleEditMode()}>Edit</Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n\nexport default PaymentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}