{"ast":null,"code":"import { takeLatest, put, call } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\nimport { LOGIN_USER } from \"../Action_Constants\";\nimport { handleUserLogin, setLoading } from \"../Slices/Auth\";\nimport { loginRequest } from \"../../Services/Auth_Services\";\nimport { useDispatch } from \"react-redux\";\nfunction* loginUser(action) {\n  try {\n    const response = yield call(loginRequest, action);\n    yield put(handleUserLogin(response === null || response === void 0 ? void 0 : response.data));\n  } catch (e) {\n    var _e$response, _e$response$data, _e$response$data$erro, _e$response2, _e$response2$data;\n    toast.error((e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : (_e$response$data$erro = _e$response$data.error) === null || _e$response$data$erro === void 0 ? void 0 : _e$response$data$erro[0]) || (e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message));\n    yield put(setLoading(false));\n  }\n}\nexport function* authSaga() {\n  yield takeLatest(LOGIN_USER, loginUser);\n}","map":{"version":3,"names":["takeLatest","put","call","toast","LOGIN_USER","handleUserLogin","setLoading","loginRequest","useDispatch","loginUser","action","response","data","e","error","message","authSaga"],"sources":["/Users/zestgeek3/work/invocenew/src/Store/Sagas/Auth.js"],"sourcesContent":["import { takeLatest, put, call } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\n\nimport { LOGIN_USER } from \"../Action_Constants\";\nimport { handleUserLogin, setLoading } from \"../Slices/Auth\";\nimport { loginRequest } from \"../../Services/Auth_Services\";\nimport { useDispatch } from \"react-redux\";\n\nfunction* loginUser(action) {\n  try {\n    const response = yield call(loginRequest, action);\n    yield put(handleUserLogin(response?.data));\n  } catch (e) {\n    toast.error(e?.response?.data?.error?.[0] || e?.response?.data?.message);\n    yield put(setLoading(false));\n  }\n}\n\nexport function* authSaga() {\n  yield takeLatest(LOGIN_USER, loginUser);\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAC1D,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,eAAe,EAAEC,UAAU,QAAQ,gBAAgB;AAC5D,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,WAAW,QAAQ,aAAa;AAEzC,UAAUC,SAAS,CAACC,MAAM,EAAE;EAC1B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACK,YAAY,EAAEG,MAAM,CAAC;IACjD,MAAMT,GAAG,CAACI,eAAe,CAACM,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOC,CAAC,EAAE;IAAA;IACVV,KAAK,CAACW,KAAK,CAAC,CAAAD,CAAC,aAADA,CAAC,sCAADA,CAAC,CAAEF,QAAQ,oEAAX,YAAaC,IAAI,8EAAjB,iBAAmBE,KAAK,0DAAxB,sBAA2B,CAAC,CAAC,MAAID,CAAC,aAADA,CAAC,uCAADA,CAAC,CAAEF,QAAQ,sEAAX,aAAaC,IAAI,sDAAjB,kBAAmBG,OAAO,EAAC;IACxE,MAAMd,GAAG,CAACK,UAAU,CAAC,KAAK,CAAC,CAAC;EAC9B;AACF;AAEA,OAAO,UAAUU,QAAQ,GAAG;EAC1B,MAAMhB,UAAU,CAACI,UAAU,EAAEK,SAAS,CAAC;AACzC"},"metadata":{},"sourceType":"module"}